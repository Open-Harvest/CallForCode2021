import { PlatformRef } from '@angular/core';
import { StoryFnAngularReturnType } from '../types';
import { Parameters } from '../types-6-0';
/**
 * Bootstrap angular application and allows to change the rendering dynamically
 * To be used as a singleton so has to set global properties of render function
 */
export declare class RendererService {
    private static instance;
    static SELECTOR_STORYBOOK_WRAPPER: string;
    static getInstance(): RendererService;
    platform: PlatformRef;
    private staticRoot;
    private storyProps$;
    private previousStoryFnAngular;
    constructor();
    /**
     * Bootstrap main angular module with main component or send only new `props` with storyProps$
     *
     * @param storyFnAngular {StoryFnAngularReturnType}
     * @param forced {boolean} If :
     * - true render will only use the StoryFn `props' in storyProps observable that will update sotry's component/template properties. Improves performance without reloading the whole module&component if props changes
     * - false fully recharges or initializes angular module & component
     * @param parameters {Parameters}
     */
    render({ storyFnAngular, forced, parameters, }: {
        storyFnAngular: StoryFnAngularReturnType;
        forced: boolean;
        parameters: Parameters;
    }): Promise<void>;
    newPlatformBrowserDynamic(): PlatformRef;
    destroyPlatformBrowserDynamic(): void;
    private initAngularRootElement;
    private fullRendererRequired;
}
