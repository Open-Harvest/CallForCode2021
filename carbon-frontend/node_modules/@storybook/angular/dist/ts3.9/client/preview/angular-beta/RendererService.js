"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RendererService = void 0;
/* eslint-disable no-undef */
var core_1 = require("@angular/core");
var platform_browser_dynamic_1 = require("@angular/platform-browser-dynamic");
var rxjs_1 = require("rxjs");
var StorybookModule_1 = require("./StorybookModule");
/**
 * Bootstrap angular application and allows to change the rendering dynamically
 * To be used as a singleton so has to set global properties of render function
 */
var RendererService = /** @class */ (function () {
    function RendererService() {
        this.staticRoot = document.getElementById('root');
        this.previousStoryFnAngular = {};
        if (typeof NODE_ENV === 'string' && NODE_ENV !== 'development') {
            try {
                // platform should be set after enableProdMode()
                core_1.enableProdMode();
            }
            catch (e) {
                // eslint-disable-next-line no-console
                console.debug(e);
            }
        }
    }
    RendererService.getInstance = function () {
        if (!RendererService.instance) {
            RendererService.instance = new RendererService();
        }
        return RendererService.instance;
    };
    /**
     * Bootstrap main angular module with main component or send only new `props` with storyProps$
     *
     * @param storyFnAngular {StoryFnAngularReturnType}
     * @param forced {boolean} If :
     * - true render will only use the StoryFn `props' in storyProps observable that will update sotry's component/template properties. Improves performance without reloading the whole module&component if props changes
     * - false fully recharges or initializes angular module & component
     * @param parameters {Parameters}
     */
    RendererService.prototype.render = function (_a) {
        var storyFnAngular = _a.storyFnAngular, forced = _a.forced, parameters = _a.parameters;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!this.fullRendererRequired(storyFnAngular, forced)) {
                            this.storyProps$.next(storyFnAngular.props);
                            return [2 /*return*/];
                        }
                        // Complete last BehaviorSubject and create a new one for the current module
                        if (this.storyProps$) {
                            this.storyProps$.complete();
                        }
                        this.storyProps$ = new rxjs_1.BehaviorSubject(storyFnAngular.props);
                        return [4 /*yield*/, this.newPlatformBrowserDynamic().bootstrapModule(StorybookModule_1.createStorybookModule(StorybookModule_1.getStorybookModuleMetadata({ storyFnAngular: storyFnAngular, parameters: parameters }, this.storyProps$)))];
                    case 1:
                        _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    RendererService.prototype.newPlatformBrowserDynamic = function () {
        // Before creating a new platform, we destroy the previous one cleanly.
        this.destroyPlatformBrowserDynamic();
        this.initAngularRootElement();
        this.platform = platform_browser_dynamic_1.platformBrowserDynamic();
        return this.platform;
    };
    RendererService.prototype.destroyPlatformBrowserDynamic = function () {
        if (this.platform && !this.platform.destroyed) {
            // Destroys the current Angular platform and all Angular applications on the page.
            // So call each angular ngOnDestroy and avoid memory leaks
            this.platform.destroy();
        }
    };
    RendererService.prototype.initAngularRootElement = function () {
        // Adds DOM element that angular will use as bootstrap component
        var storybookWrapperElement = document.createElement(RendererService.SELECTOR_STORYBOOK_WRAPPER);
        this.staticRoot.innerHTML = '';
        this.staticRoot.appendChild(storybookWrapperElement);
    };
    RendererService.prototype.fullRendererRequired = function (storyFnAngular, forced) {
        var previousStoryFnAngular = this.previousStoryFnAngular;
        this.previousStoryFnAngular = storyFnAngular;
        var hasChangedTemplate = !!(storyFnAngular === null || storyFnAngular === void 0 ? void 0 : storyFnAngular.template) && (previousStoryFnAngular === null || previousStoryFnAngular === void 0 ? void 0 : previousStoryFnAngular.template) !== storyFnAngular.template;
        return !forced || !this.storyProps$ || hasChangedTemplate;
    };
    RendererService.SELECTOR_STORYBOOK_WRAPPER = 'storybook-wrapper';
    return RendererService;
}());
exports.RendererService = RendererService;
